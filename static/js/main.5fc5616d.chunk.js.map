{"version":3,"sources":["components/CountriesListItem/CountriesListItem.module.css","components/CountriesList/CountriesList.module.css","components/Header/Header.module.css","components/Layout/Layout.module.css","components/Card/Card.module.css","components/LoadingSpinner/LoadingSpinner.module.css","components/Lines/Lines.module.css","components/Markers/Markers.module.css","components/Map/Map.module.css","components/Card/index.js","components/Card/Card.js","store/countries-context.js","utils/constants.js","components/CountriesListItem/index.js","components/CountriesListItem/CountriesListItem.js","components/LoadingSpinner/index.js","components/LoadingSpinner/LoadingSpinner.js","components/CountriesList/CountriesList.js","components/CountriesList/index.js","components/Header/index.js","components/Header/Header.js","components/Layout/index.js","components/Layout/Layout.js","components/Lines/index.js","components/Lines/Lines.js","components/Markers/index.js","components/Markers/Markers.js","components/Map/index.js","components/Map/Map.js","utils/api.js","App.js","utils/sorting-algorithm.js","store/CountriesProvider.js","index.js"],"names":["module","exports","Card","props","className","styles","card","children","CountriesContext","React","createContext","selectedCountries","sortedCoordinates","addSelectedCountry","removeSelectedCountry","selectedCoordinates","dragItem","allFlags","set","get","FIREBASE_DOMAIN","COUNTRIES_API_DOMAIN","LIST_TYPE_ADD","LIST_TYPE_REMOVE","ADD_COUNTRY","REMOVE_COUNTRY","THEME_LIGHT","THEME_DARK","CountriesListItem","useContext","listItem","onClick","onSelectCountry","countryName","draggable","onDragStart","event","item","list","listType","country","type","onDragEnd","name","flag","src","flagUrl","alt","LoadingSpinner","spinner","CountriesList","flags","isLoading","Object","keys","length","highlightedBorder","highlighted","border","selectCountryHandler","CONSTANTS","listItems","countries","filter","includes","map","title","subtitle","style","onDragOver","preventDefault","onDrop","Header","header","logo","changeThemeHandler","Layout","memo","layout","main","Lines","lines","coordinatePair","index","line","from","to","stroke","strokeWidth","strokeLinecap","Markers","allCoordinates","markers","marker","coordinates","r","textAnchor","y","Map","projectionConfig","center","scale","geography","geoUrl","countriesDrawHandler","fetchData","url","a","fetch","response","data","json","reformatData","itemsToReformat","reformatedData","countryInfo","reformatedItems","getAllCountries","getAllCoordinates","getAllFlags","App","useState","setCountries","theme","setTheme","setAllCoordinates","setAllFlags","useCallback","coordinatesData","flagsData","useEffect","forEach","property","propertyValue","getComputedStyle","document","documentElement","getPropertyValue","setProperty","prevTheme","geographies","properties","REGION_UN","fill","rsmKey","sortingAlgorithm","permutations","inputArr","result","permute","arr","push","i","curr","slice","next","splice","concat","getAllPermutations","coordinates1","coordinates2","shortestPath","distance","path","coordinatePairs","resultDistance","Math","sqrt","abs","pow","calculateShortestPath","secondCoordinatePair","defaultSelectedCountriesState","selectedCountriesReducer","state","action","countryCoordinates","filteredCountries","CountriesProvider","setDragItem","setSortedCoordinates","useReducer","dispatchSelectedCountries","selectedCoutriesCoordinates","values","actions","useMemo","addCountry","removeCountry","countriesContext","Provider","value","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5fc5616d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"CountriesListItem_listItem__1AACx\",\"name\":\"CountriesListItem_name__3B7OP\",\"flag\":\"CountriesListItem_flag__2-aXz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"CountriesList_list__3Icoz\",\"title\":\"CountriesList_title__13FPx\",\"subtitle\":\"CountriesList_subtitle__23Q_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1iyXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__3v3M_\",\"main\":\"Layout_main__15PIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__UdCbW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Dwi3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"Lines_line__3w39p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"Markers_marker__1xk57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"Map_map__1TtUq\"};","import Card from \"./Card\";\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styles from \"./Card.module.css\";\r\n\r\nconst Card = (props) => {\r\n  return <div className={styles.card}>{props.children}</div>;\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst CountriesContext = React.createContext({\r\n  selectedCountries: [],\r\n  sortedCoordinates: [],\r\n  addSelectedCountry: () => {},\r\n  removeSelectedCountry: () => {},\r\n  selectedCoordinates: {},\r\n  dragItem: {},\r\n  allFlags: { set: ()=>{}, get: []}\r\n});\r\n\r\nexport default CountriesContext;\r\n","export const FIREBASE_DOMAIN =\r\n  \"https://traveling-salesman-probl-12def-default-rtdb.europe-west1.firebasedatabase.app\";\r\nexport const COUNTRIES_API_DOMAIN =\r\n  \"https://countriesnow.space/api/v0.1/countries\";\r\nexport const GEO_DOMAIN =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nexport const LIST_TYPE_ADD = \"ADD\";\r\nexport const LIST_TYPE_REMOVE = \"REMOVE\";\r\n\r\nexport const TITLE_ALL_COUNTRIES = \"All Countries\";\r\nexport const TITLE_SELECTED_COUNTRIES = \"Selected Countries\";\r\n\r\nexport const SUBTITLE_ALL_COUNTRIES = \"(drag to select)\";\r\nexport const SUBTITLE_SELECTED_COUNTRIES = \"(drag to remove)\";\r\n\r\nexport const ADD_COUNTRY = \"ADD_COUNTRY\";\r\nexport const REMOVE_COUNTRY = \"REMOVE_COUNTRY\";\r\n\r\nexport const THEME_LIGHT = \"light\";\r\nexport const THEME_DARK = \"dark\";\r\n\r\nexport const HIGHLIGHTED_LIST_BORDER = \"0.5rem dashed #c5efc5\";\r\n\r\nexport const MAP_REGION = 'Europe'","import CountriesListItem from \"./CountriesListItem\"\r\n\r\nexport default CountriesListItem","import { useContext } from \"react\";\r\nimport CountriesContext from \"../../store/countries-context\";\r\nimport styles from \"./CountriesListItem.module.css\";\r\n\r\nconst CountriesListItem = (props) => {\r\n  const { dragItem } = useContext(CountriesContext);\r\n\r\n  const selectCountryHandler = () => {\r\n    props.onSelectCountry(props.countryName);\r\n  };\r\n\r\n  const dragStartHandler = (event, item, list) => {\r\n    dragItem.set({ country: item, type: list });\r\n  };\r\n\r\n  const dragEndHandler = () => {\r\n    dragItem.set({});\r\n  };\r\n\r\n  return (\r\n    <li\r\n      data-testid=\"countryListItem\"\r\n      className={styles.listItem}\r\n      onClick={selectCountryHandler}\r\n      draggable={true}\r\n      onDragStart={(event) =>\r\n        dragStartHandler(event, props.countryName, props.listType)\r\n      }\r\n      onDragEnd={() => dragEndHandler()}\r\n    >\r\n      <p data-testid=\"countryName\" className={styles.name}>\r\n        {props.countryName}\r\n      </p>\r\n      <img\r\n        data-testid=\"flag\"\r\n        className={styles.flag}\r\n        src={props.flagUrl}\r\n        alt={props.flagUrl}\r\n        draggable={false}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CountriesListItem;\r\n","import LoadingSpinner from \"./LoadingSpinner\";\r\n\r\nexport default LoadingSpinner;\r\n","import styles from \"./LoadingSpinner.module.css\";\r\n\r\nconst LoadingSpinner = () => {\r\n  return <div className={styles.spinner}></div>;\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useContext } from \"react\";\r\nimport CountriesContext from \"../../store/countries-context\";\r\nimport * as CONSTANTS from \"../../utils/constants\";\r\nimport CountriesListItem from \"../CountriesListItem\";\r\nimport LoadingSpinner from \"../LoadingSpinner\";\r\nimport styles from \"./CountriesList.module.css\";\r\n\r\nconst CountriesList = (props) => {\r\n  const {\r\n    selectedCountries,\r\n    addSelectedCountry,\r\n    removeSelectedCountry,\r\n    allFlags,\r\n    dragItem,\r\n  } = useContext(CountriesContext);\r\n  const flags = allFlags.get;\r\n  const isLoading = !Object.keys(flags).length;\r\n\r\n  let highlightedBorder = props.highlighted\r\n    ? { border: CONSTANTS.HIGHLIGHTED_LIST_BORDER }\r\n    : null;\r\n\r\n  const selectCountryHandler = (countryName, listType = props.listType) => {\r\n    if (listType === CONSTANTS.LIST_TYPE_ADD && selectedCountries.length < 8) {\r\n      addSelectedCountry(countryName);\r\n    } else if (listType === CONSTANTS.LIST_TYPE_REMOVE) {\r\n      removeSelectedCountry(countryName);\r\n    }\r\n  };\r\n\r\n  const dropListHandler = () => {\r\n    dragItem.set({});\r\n    if (dragItem.get.type !== props.listType) {\r\n      selectCountryHandler(dragItem.get.country, dragItem.get.type);\r\n    }\r\n  };\r\n\r\n  const listItems = props.countries\r\n    .filter((country) => {\r\n      if (props.listType === CONSTANTS.LIST_TYPE_ADD) {\r\n        return !selectedCountries.includes(country);\r\n      } else {\r\n        return country;\r\n      }\r\n    })\r\n    .map((country) => {\r\n      return (\r\n        <CountriesListItem\r\n          data-testid=\"countriesList\"\r\n          key={country}\r\n          flagUrl={flags[country]}\r\n          countryName={country}\r\n          listType={props.listType}\r\n          onSelectCountry={selectCountryHandler}\r\n        />\r\n      );\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <h2 className={styles.title}>{props.title}</h2>\r\n      <p className={styles.subtitle}>{props.subtitle}</p>\r\n      <ul\r\n        data-testid=\"countriesList\"\r\n        style={highlightedBorder}\r\n        className={styles.list}\r\n        onDragOver={(event) => {\r\n          event.preventDefault();\r\n        }}\r\n        onDrop={() => dropListHandler()}\r\n      >\r\n        {isLoading && props.listType === CONSTANTS.LIST_TYPE_ADD && (\r\n          <>\r\n            <LoadingSpinner />\r\n            <h3>Loading...</h3>\r\n          </>\r\n        )}\r\n        {!isLoading && listItems}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountriesList;\r\n","import CountriesList from \"./CountriesList\";\r\n\r\nexport default CountriesList;\r\n","import Header from \"./Header\";\r\n\r\nexport default Header","import styles from \"./Header.module.css\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <h1>TRAVELLING SALESMAN PROBLEM</h1>\r\n      <button data-testid=\"button\" className={styles.logo} onClick={props.changeThemeHandler}></button>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import Layout from \"./Layout\"\r\n\r\nexport default Layout","import React from \"react\";\r\nimport Header from \"../Header\";\r\nimport styles from \"./Layout.module.css\"\r\n\r\nconst Layout = React.memo((props) => {\r\n  return (\r\n    <div className={styles.layout}>\r\n      <Header changeThemeHandler={props.changeThemeHandler} />\r\n      <main className={styles.main}>{props.children}</main>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Layout;\r\n","import Lines from \"./Lines\";\r\n\r\nexport default Lines;\r\n","import React, { useContext } from \"react\";\r\nimport { Line } from \"react-simple-maps\";\r\nimport CountriesContext from \"../../store/countries-context\";\r\nimport styles from \"./Lines.module.css\";\r\n\r\nconst Lines = () => {\r\n  // sortedCoordinates - [[x1, y1], [x2, y2]]\r\n  const { sortedCoordinates } = useContext(CountriesContext);\r\n\r\n  const lines = sortedCoordinates.map((coordinatePair, index) => {\r\n    return (\r\n      <Line\r\n        className={styles.line}\r\n        key={index}\r\n        from={coordinatePair[0]}\r\n        to={coordinatePair[1]}\r\n        stroke=\"#FF5533\"\r\n        strokeWidth={2}\r\n        strokeLinecap=\"round\"\r\n      />\r\n    );\r\n  });\r\n\r\n  return <>{lines}</>;\r\n};\r\n\r\nexport default Lines;\r\n","import Markers from \"./Markers\"\r\n\r\nexport default Markers","import React, { useContext } from \"react\";\r\nimport { Marker } from \"react-simple-maps\";\r\nimport CountriesContext from \"../../store/countries-context\";\r\nimport styles from \"./Markers.module.css\";\r\n\r\nconst Markers = React.memo(() => {\r\n  // selectedCoordinates - [[x1, y1], [x2, y2]]\r\n  const { selectedCountries, allCoordinates } = useContext(CountriesContext);\r\n\r\n  const markers = selectedCountries.map((countryName) => {\r\n    return (\r\n      <Marker\r\n        className={styles.marker}\r\n        key={countryName}\r\n        coordinates={allCoordinates.get[countryName]}\r\n      >\r\n        <circle r={6} stroke=\"#fff\" strokeWidth={2} />\r\n\r\n        <text textAnchor=\"middle\" y=\"25\">\r\n          {countryName}\r\n        </text>\r\n      </Marker>\r\n    );\r\n  });\r\n\r\n  return <>{markers}</>;\r\n});\r\n\r\nexport default Markers;\r\n","import Map from \"./Map\"\r\n\r\nexport default Map","import React from \"react\";\r\nimport { ComposableMap, Geographies } from \"react-simple-maps\";\r\nimport Lines from \"../Lines\";\r\nimport Markers from \"../Markers\";\r\nimport styles from \"./Map.module.css\";\r\n\r\nconst Map = React.memo((props) => {\r\n  return (\r\n    <ComposableMap\r\n      className={styles.map}\r\n      projectionConfig={{\r\n        center: [9, 49],\r\n        scale: 1100,\r\n      }}\r\n    >\r\n      <Geographies data-testid=\"geographies\" geography={props.geoUrl}>\r\n        {props.countriesDrawHandler}\r\n      </Geographies>\r\n      <Lines />\r\n      <Markers />\r\n    </ComposableMap>\r\n  );\r\n});\r\n\r\nexport default Map;\r\n","import * as CONSTANTS from \"./constants\";\r\n\r\nasync function fetchData(url) {\r\n  const response = await fetch(url);\r\n  const data = response.json();\r\n  return data;\r\n}\r\n\r\nfunction reformatData(data, itemsToReformat) {\r\n  // {name: [data]}\r\n  const reformatedData = {};\r\n  for (const countryInfo of data) {\r\n    const countryName = countryInfo[\"name\"];\r\n    const reformatedItems = itemsToReformat.map((item) => countryInfo[item]);\r\n    reformatedData[countryName] = reformatedItems;\r\n  }\r\n  return reformatedData;\r\n}\r\n\r\nexport async function getAllCountries() {\r\n  const data = await fetchData(`${CONSTANTS.FIREBASE_DOMAIN}/countries.json`);\r\n  return data;\r\n}\r\n\r\nexport async function getAllCoordinates() {\r\n  const { data } = await fetchData(\r\n    `${CONSTANTS.COUNTRIES_API_DOMAIN}/positions`\r\n  );\r\n\r\n  const itemsToReformat = [\"long\", \"lat\"];\r\n  const reformatedData = reformatData(data, itemsToReformat);\r\n  return reformatedData;\r\n}\r\n\r\nexport async function getAllFlags() {\r\n  const { data } = await fetchData(\r\n    `${CONSTANTS.COUNTRIES_API_DOMAIN}/flag/images`\r\n  );\r\n\r\n  const itemsToReformat = [\"flag\"];\r\n  const reformatedData = reformatData(data, itemsToReformat);\r\n  return reformatedData;\r\n}","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Geography } from \"react-simple-maps\";\nimport Card from \"./components/Card\";\nimport CountriesList from \"./components/CountriesList\";\nimport Layout from \"./components/Layout\";\nimport Map from \"./components/Map\";\nimport CountriesContext from \"./store/countries-context\";\nimport { getAllCoordinates, getAllCountries, getAllFlags } from \"./utils/api\";\nimport * as CONSTANTS from \"./utils/constants\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [theme, setTheme] = useState(CONSTANTS.THEME_DARK);\n  const { allCoordinates, allFlags, selectedCountries, dragItem } =\n    useContext(CountriesContext);\n\n  const setAllCoordinates = allCoordinates.set;\n  const setAllFlags = allFlags.set;\n\n  const fetchData = useCallback(async () => {\n    const countries = await getAllCountries();\n    setCountries(countries);\n\n    const coordinatesData = await getAllCoordinates();\n    setAllCoordinates(coordinatesData);\n\n    const flagsData = await getAllFlags();\n    setAllFlags(flagsData);\n  }, [setCountries, setAllCoordinates, setAllFlags]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  useEffect(() => {\n    const properties = [\n      `-primary-color`,\n      `-secondary-color`,\n      `-list-color`,\n      `-list-border-color`,\n      `-text-color`,\n      `-text-border-color`,\n      `-card-border-color`,\n      `-marker-color`,\n      `-line-color`,\n    ];\n\n    properties.forEach((property) => {\n      const propertyValue = getComputedStyle(\n        document.documentElement\n      ).getPropertyValue(`--${theme + property}`);\n      document.documentElement.style.setProperty(\n        `--selected${property}`,\n        propertyValue\n      );\n    });\n  }, [theme]);\n\n  const countriesDrawHandler = ({ geographies }) => {\n    const filteredCountries = geographies.filter((country) => {\n      return country.properties.REGION_UN === CONSTANTS.MAP_REGION;\n    });\n\n    const geographyComponentsArray = filteredCountries.map((country) => {\n      return (\n        <Geography\n          key={country.rsmKey}\n          geography={country}\n          fill=\"#EAEAEC\"\n          stroke=\"#D6D6DA\"\n        />\n      );\n    });\n    return geographyComponentsArray;\n  };\n\n  const changeThemeHandler = () => {\n    setTheme((prevTheme) => {\n      if (prevTheme === CONSTANTS.THEME_LIGHT) {\n        return CONSTANTS.THEME_DARK;\n      } else {\n        return CONSTANTS.THEME_LIGHT;\n      }\n    });\n  };\n\n\n  return (\n    <>\n      <Layout changeThemeHandler={changeThemeHandler}>\n        <Map\n          countriesDrawHandler={countriesDrawHandler}\n          geoUrl={CONSTANTS.GEO_DOMAIN}\n        />\n        <Card>\n          <CountriesList\n            listType={CONSTANTS.LIST_TYPE_ADD}\n            countries={countries}\n            title={CONSTANTS.TITLE_ALL_COUNTRIES}\n            subtitle={CONSTANTS.SUBTITLE_ALL_COUNTRIES}\n            highlighted={dragItem.get.type === CONSTANTS.LIST_TYPE_REMOVE}\n          ></CountriesList>\n          <CountriesList\n            listType={CONSTANTS.LIST_TYPE_REMOVE}\n            countries={selectedCountries}\n            title={CONSTANTS.TITLE_SELECTED_COUNTRIES}\n            subtitle={CONSTANTS.SUBTITLE_SELECTED_COUNTRIES}\n            highlighted={dragItem.get.type === CONSTANTS.LIST_TYPE_ADD}\n          ></CountriesList>\n        </Card>\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n","const getDistance = (coordinates1, coordinates2) => {\r\n  if (!coordinates2) return 0;\r\n  const distance = Math.sqrt(\r\n    Math.abs(\r\n      Math.pow(coordinates1[0] - coordinates2[0], 2) +\r\n        Math.pow(coordinates1[1] - coordinates2[1], 2)\r\n    )\r\n  );\r\n  return distance;\r\n};\r\n\r\nconst getAllPermutations = (inputArr) => {\r\n  let result = [];\r\n  const permute = (arr, memo = []) => {\r\n    if (arr.length === 0) {\r\n      if (memo[0]) {\r\n        memo.push(memo[0]);\r\n      }\r\n      result.push(memo);\r\n    } else {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        let curr = arr.slice();\r\n        let next = curr.splice(i, 1);\r\n        permute(curr.slice(), memo.concat(next));\r\n      }\r\n    }\r\n  };\r\n  permute(inputArr);\r\n  return result;\r\n};\r\n\r\nconst calculateShortestPath = (permutations) => {\r\n  const shortestPath = { distance: 1000, path: [] };\r\n\r\n  for (let coordinatePairs of permutations) {\r\n    let resultDistance = 0;\r\n    for (let i = 0; i < coordinatePairs.length - 1; i++) {\r\n      resultDistance += getDistance(coordinatePairs[i], coordinatePairs[i + 1]);\r\n    }\r\n\r\n    if (shortestPath.distance >= resultDistance) {\r\n      shortestPath.distance = resultDistance;\r\n      shortestPath.path = coordinatePairs;\r\n    }\r\n  }\r\n\r\n  return { path: shortestPath.path, distance: shortestPath.distance };\r\n};\r\n\r\nconst sortingAlgorithm = (selectedCoordinates) => {\r\n  const permutations = getAllPermutations(selectedCoordinates);\r\n  // permututions = [ [[x1,y1], [x2,y2], [x1, y1]], [[x2, y2], [x1, y1], [x2, y2]] ]\r\n  const { path } = calculateShortestPath(permutations);\r\n\r\n  const coordinatePairs = path.map((coordinatePair, index, coordinates) => {\r\n    let secondCoordinatePair = coordinates[index + 1];\r\n    if (index === coordinates.length - 1) {\r\n      secondCoordinatePair = coordinates[0];\r\n    }\r\n    return [coordinatePair, secondCoordinatePair];\r\n  });\r\n  // coordinatePairs = [ [[x1, y1], [x2, y2]], [[x2, y2], [x3, y3]], [[x3, y3], [x1, y1]] ]\r\n  \r\n  return coordinatePairs;\r\n};\r\n\r\nexport default sortingAlgorithm;\r\n","import React, { useEffect, useMemo, useReducer, useState } from \"react\";\r\nimport CountriesContext from \"./countries-context\";\r\nimport * as CONSTANTS from \"../utils/constants\";\r\nimport sortingAlgorithm from \"../utils/sorting-algorithm\";\r\n\r\nconst defaultSelectedCountriesState = {\r\n  /* countryName: [long, lat] */\r\n};\r\n\r\nconst selectedCountriesReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case CONSTANTS.ADD_COUNTRY:\r\n      return { ...state, [action.countryName]: action.countryCoordinates };\r\n\r\n    case CONSTANTS.REMOVE_COUNTRY:\r\n      const filteredCountries = state;\r\n      delete filteredCountries[action.countryName];\r\n      return { ...filteredCountries };\r\n\r\n    default:\r\n      return defaultSelectedCountriesState;\r\n  }\r\n};\r\n\r\nconst CountriesProvider = (props) => {\r\n  const [dragItem, setDragItem] = useState([]);\r\n  const [allCoordinates, setAllCoordinates] = useState({});\r\n  const [allFlags, setAllFlags] = useState({});\r\n  const [sortedCoordinates, setSortedCoordinates] = useState([]);\r\n  const [selectedCountries, dispatchSelectedCountries] = useReducer(\r\n    selectedCountriesReducer,\r\n    defaultSelectedCountriesState\r\n  );\r\n\r\n  useEffect(() => {\r\n    const selectedCoutriesCoordinates = Object.values(selectedCountries);\r\n    setSortedCoordinates(sortingAlgorithm(selectedCoutriesCoordinates));\r\n  }, [selectedCountries]);\r\n\r\n  const actions = useMemo(\r\n    () => ({\r\n      addCountry: (countryName) => {\r\n        dispatchSelectedCountries({\r\n          type: CONSTANTS.ADD_COUNTRY,\r\n          countryName,\r\n          countryCoordinates: allCoordinates[countryName],\r\n        });\r\n      },\r\n      removeCountry: (countryName) => {\r\n        dispatchSelectedCountries({\r\n          type: CONSTANTS.REMOVE_COUNTRY,\r\n          countryName,\r\n        });\r\n      },\r\n    }),\r\n    [allCoordinates]\r\n  );\r\n\r\n  const addSelectedCountryHandler = (countryName) => {\r\n    actions.addCountry(countryName);\r\n  };\r\n\r\n  const removeSelectedCountryHandler = (countryName) => {\r\n    actions.removeCountry(countryName);\r\n  };\r\n\r\n  const countriesContext = {\r\n    selectedCountries: Object.keys(selectedCountries),\r\n    addSelectedCountry: addSelectedCountryHandler,\r\n    removeSelectedCountry: removeSelectedCountryHandler,\r\n    sortedCoordinates: sortedCoordinates,\r\n\r\n    dragItem: { set: setDragItem, get: dragItem },\r\n    allCoordinates: { set: setAllCoordinates, get: allCoordinates },\r\n    allFlags: { set: setAllFlags, get: allFlags },\r\n  };\r\n\r\n  return (\r\n    <CountriesContext.Provider value={countriesContext}>\r\n      {props.children}\r\n    </CountriesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CountriesProvider;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport CountriesProvider from \"./store/CountriesProvider\";\n\nReactDOM.render(\n  <CountriesProvider>\n    <App />\n  </CountriesProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}